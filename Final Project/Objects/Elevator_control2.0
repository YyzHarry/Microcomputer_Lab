#include <c8051f020.h>
#include <stdio.h>
#include "font.h"

#define SYSCLK 22118400
#define NOKEY 255
#define OPERATION_TIME 250
#define STOP_TIME 500
#define STAIR_SUM 6     // 定义楼层数目

// Define Finite-State Machine
#define F0 0	// 初始化状态
#define F1 1	// 等待状态，所有变量保持不变
#define F2 2	// 向上运行状态，设置direction = UP
#define F3 3	// 开启计数，到达一定时间(2s)后重置计数初值并增加楼层数。表示上升时间
#define F4 4	// 判断请求信息和目的地信息，决定之后是电梯是继续运行还是停靠
#define F5 5	// 停靠当前楼层，开启计数器，到达一定时间(2s)后重置计数初值。表示停靠时间
#define F6 6	// 向下运行状态，设置direction = DOWN
#define F7 7	// 开启计数，到达一定时间(2s)后重置计数初值并减小楼层数。表示下降时间
#define F8 8	// 判断请求信息和目的地信息，决定之后是电梯是继续运行还是停靠

typedef unsigned char uchar;

// 电梯运行状态
#define UP 0
#define DOWN 1
#define STOP 2


// Define for Display
#define UNIT_LENGTH	    12	// 显示最小单元的长和宽, 12*8
#define UNIT_WIDTH		8

#define LEFT_ELEVATOR 	136	// 屏幕上电梯图形的左边沿
#define RIGHT_ELEVATOR 	184	// 屏幕上电梯图形的右边沿
#define INSIDE_NUM		104	// 屏幕上显示电梯内部对应楼层按键是的位置（列）
#define OUTSIDE_DIR		208	// 屏幕上显示各楼层上/下楼按键的位置
#define DIRECTION_SHOW	40	// 屏幕上显示电梯运行方向的位置（列）

#define ELEVATOR_HEIGHT	70	// 每层楼的高度，电梯位置改变的量

// change_color() 函数的相应参数设定
#define ELEVATOR		10
#define INSIDE			11
#define OUTSIDE_UP		12
#define OUTSIDE_DOWN	13
#define DIRECTION		14

// 屏幕显示颜色的设定
// (16bit, 5-6-5分别代表红-绿-蓝，比如红色就是11111-000000-00000，即0xF800)
#define YELLOW 0xFF00
#define WHITE  0xFFFF
#define BLACK  0x0000
#define RED	   0xF800

unsigned char xdata reset _at_ (0x8003);
unsigned char xdata cmd _at_ (0x8002);
unsigned char xdata mydata _at_ (0x9002);

// 数码管设定
unsigned char xdata seg _at_ (0x8000);  //数码管段码地址
unsigned char xdata cs _at_ (0x8001);   //数码管位码地址
const unsigned char code segs[] =       //段码表
{0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8,
0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E};
const unsigned char code css[] = {0x7, 0xB, 0xD, 0xE};  //位码表


uchar direction = UP;           // 定义电梯的方向
uchar state_now = F0;
uchar state_next = F1;
unsigned int stair_now = 1;		// 目前所在的楼层

bit K1, K2, K3, K4;		        // State-change Condition

uchar up_request[STAIR_SUM + 1];
uchar down_request[STAIR_SUM + 1];

unsigned int count = 0;		// For Counter 0

void SYSCLK_Init (void)
{
	int i;
	OSCXCN = 0x67;
	for (i=0; i < 256; i++);
	while (!(OSCXCN & 0x80));
	OSCICN = 0x88;
}

void PORT_Init (void)
{
	SYSCLK_Init(); 		// 使用外部晶振
	EMI0CF = 0x1F; 		// 非复用总线，不使用内部XRAM
	XBR2 = 0x42; 		// 使用P0-P3作为总线,允许XBR
	P0MDOUT = 0xC0; 	// 推挽输出P0.6 和 P0.7
	P1MDOUT = 0xFF; 	// 高位地址
	P2MDOUT = 0xFF; 	// 地位地址
	P3MDOUT = 0xFF; 	// 数据总线
}

void Delay(int num)
{
	int i;
	for(i=0;i<num;i++);
	return;
}

uchar getkey()
{
	uchar i;
	uchar key;
	const uchar code dec[] = {0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0};
	const uchar code trans[] = {0xC, 9, 5, 1, 0xD, 0, 6, 2, 0xE, 0xA, 7, 3, 0xF, 0xB, 8, 4};

	P4 = 0x0F;
	Delay(100);
	i = ~P4 & 0x0F;
	if (i == 0) return NOKEY;
	key = dec[i] * 4;
	Delay(1000);
	P4 = 0xF0;
	Delay(100);
	i = ~P4;
	i >>= 4;
	if (i == 0) return NOKEY;
	key = key + dec[i];
	key = trans[key];
	return key;
}

void SHOW_LED(int elevator_now) 	// 显示目前电梯所在楼层
{
	uchar i;
	int j = elevator_now;
	for (i=0; i<4; ++i) {
		seg = segs[j % 10];
		cs = css[i];
		j /= 10;
		Delay(1000);
	}
}

void timer_ms(int num)
{
	int i;
	for(i = 0; i < num; i++){
		SHOW_LED(stair_now);
		Delay(1000);
	}
	return;
}


/* init the emif using the lower port  */
void EMIF_Low(void)
{
    SYSCLK_Init();
    EMI0CF = 0x1F;  // non-multiplexed mode, external only
    XBR2 = 0x42;    // Enable xbr
    P0MDOUT = 0xC0;
    P1MDOUT = 0xFF;
    P2MDOUT = 0xFF;
    P3MDOUT = 0xFF;
}

// 关于显示屏的函数
void lcd_init9481(void)
{
    reset = 1;
    Delay(200);
    cmd = 0x11; // Exit from sleeping
    Delay(3000);
    cmd = 0xD0; // Power Setting
    mydata = 0x07;
    mydata = 0x41;
    mydata = 0x1D;
    mydata = 0x0D;

    cmd = 0xD1; // VCOM Control
    mydata = 0x00;
    mydata = 0x2B;
    mydata = 0x1F;

    cmd = 0x0C; // get pixel format (why get?)
    mydata = 0x55;
    cmd = 0x3A; // set pixel format
    mydata = 0x55; // 16bit/pixel
    cmd = 0xB4; // Display mode;
    mydata = 0;

    cmd= 0xC0; // Panel Driving Setting
    mydata = 0;
    mydata = 0x3B;
    mydata = 0x0;
    mydata = 0x2;
    mydata = 0x11;
    mydata = 0;

    cmd = 0xC5; // Frame rate and Inversion Control
    mydata = 0x03;

    cmd = 0xC8;  // Gamma Setting
    mydata = 0;
    mydata = 14;
    mydata = 0x33;
    mydata = 0x10;
    mydata = 0x00;
    mydata = 0x16;
    mydata = 0x44;
    mydata = 0x36;
    mydata = 0x77;
    mydata = 0x00;
    mydata = 0x0F;
    mydata = 0x00;

    cmd = 0xF3;
    mydata = 0x40;
    mydata = 0x0A;

    cmd = 0x36; // Address Mode
    mydata = 0x0A;

    cmd = 0xF0;
    mydata = 0x08;

    cmd = 0xF6;
    mydata = 0x84;
    cmd = 0xF7;
    mydata = 0x80;
    cmd = 0x36;  // Address Mode;
    mydata = 0x0A;

    Delay(3000);
    cmd = 0x29;  // Set display on
}

void lcd_init9486(void) /* ZHA */
{
    reset = 1;
    Delay(200);
    cmd = 0xF2;
    mydata = 0x18;
    mydata = 0xA3;
    mydata = 0x12;
    mydata = 0x02;
    mydata = 0xB2;
    mydata = 0x12;
    mydata = 0xFF;
    mydata = 0x10;
    mydata = 0x00;
    cmd = 0xF8;
    mydata = 0x21;
    mydata = 0x04;
    cmd = 0xF9;
    mydata = 0x00;
    mydata = 0x08;
    cmd = 0x36;
    mydata = 0x08;
    cmd = 0x3A;
    mydata = 0x05;
    cmd = 0xB4;
    mydata = 0x01;//0x00
    cmd = 0xB6;
    mydata = 0x02;
    mydata = 0x22;
    cmd = 0xC1;
    mydata = 0x41;
    cmd = 0xC5;
    mydata = 0x00;
    mydata = 0x07;//0x18
    cmd = 0xE0;
    mydata = 0x0F;
    mydata = 0x1F;
    mydata = 0x1C;
    mydata = 0x0C;
    mydata = 0x0F;
    mydata = 0x08;
    mydata = 0x48;
    mydata = 0x98;
    mydata = 0x37;
    mydata = 0x0A;
    mydata = 0x13;
    mydata = 0x04;
    mydata = 0x11;
    mydata = 0x0D;
    mydata = 0x00;
    cmd = 0xE1;
    mydata = 0x0F;
    mydata = 0x32;
    mydata = 0x2E;
    mydata = 0x0B;
    mydata = 0x0D;
    mydata = 0x05;
    mydata = 0x47;
    mydata = 0x75;
    mydata = 0x37;
    mydata = 0x06;
    mydata = 0x10;
    mydata = 0x03;
    mydata = 0x24;
    mydata = 0x20;
    mydata = 0x00;
    cmd = 0x11;
    Delay(200);
    cmd = 0x29;
}

void dis_color(unsigned int c)
{
    int i, j;
     cmd = 0x2C;    // start write
    for (i = 0; i < 480; ++i)
        for (j = 0; j < 320; ++j) {
            mydata = c >> 8;
            mydata = c & 0xFF;
        }
}

void show_char(unsigned int x, unsigned int y, unsigned int color, unsigned char f)
{
    unsigned char i, j, c;
    cmd = 0x2A; // set column address
    mydata = (x >> 8) & 1;
    mydata = (x & 0xFF);
    mydata = ((x + 7) >> 8) & 1;
    mydata = (x + 7) & 0xFF;
    cmd = 0x2B; // set page address
    mydata = (y >> 8) & 1;
    mydata = (y & 0xFF);
    mydata = ((y + 11) >> 8) & 1;
    mydata = (y + 11) & 0xFF;
    cmd = 0x2C;
    for (i = 0; i < 12; ++i) {
        c = font_8x12[f][i];
        for (j = 0; j < 8; ++j) {
            if (c & 1) {
                mydata = color >> 8;
                mydata = color & 0xFF;
            } else {
                mydata = 0xff;
                mydata = 0;
            }
            c = c >> 1;
        }
    }
}

// 更新屏幕的函数，包括更新电梯所在位置、电梯内部按键状态、各层是否有人要乘电梯上/下楼、电梯运行方向
void change_color(unsigned int stair, uchar object, unsigned int color)
{
	unsigned int i, j;
	switch(object){
		case ELEVATOR:
			for(i = LEFT_ELEVATOR; i <= RIGHT_ELEVATOR; i += UNIT_WIDTH)
				for(j = ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH; j<=ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH; j+=UNIT_LENGTH)
					show_char(i,j,color,0xDB);
			break;
		case INSIDE:	//更新电梯内部按键状态，如有楼层被按下，那么相应的数字将会被标红
			if(stair == 1){
				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);
				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)+UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)-UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
			}
			else if(stair == 2){
				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);

				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
			}
			else if(stair == 3){
				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);

				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
			}
			else if(stair == 4){
				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);

				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
			}
			else if(stair == 5){
				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);

				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
			}
			else if(stair == 6){
                show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair), color, 0xDB);

				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)+2*UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-UNIT_LENGTH, color, 0xDB);

				show_char(INSIDE_NUM, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM+UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
				show_char(INSIDE_NUM-UNIT_WIDTH, ELEVATOR_HEIGHT*(7-stair)-2*UNIT_LENGTH, color, 0xDB);
			}
			break;
		case OUTSIDE_UP:	//如果有楼层的“向上”按键被按下，在屏幕上相应向上的三角被标红
			show_char(OUTSIDE_DIR, ELEVATOR_HEIGHT*(7-stair)-UNIT_LENGTH, color, 0x1E);
			break;
		case OUTSIDE_DOWN:	//如果有楼层的“向下”按键被按下，在屏幕上相应向下的三角被标红
			show_char(OUTSIDE_DIR, ELEVATOR_HEIGHT*(7-stair)+UNIT_LENGTH, color, 0x1F);
			break;
		case DIRECTION:		//更新电梯运行方向
			if(direction == UP){
				show_char(DIRECTION_SHOW, ELEVATOR_HEIGHT, color, 0x1E);
				show_char(DIRECTION_SHOW, ELEVATOR_HEIGHT+UNIT_LENGTH, (RED-color), 0x1F);
			}
			else if(direction == DOWN){
				show_char(DIRECTION_SHOW, ELEVATOR_HEIGHT, (RED-color), 0x1E);
				show_char(DIRECTION_SHOW, ELEVATOR_HEIGHT+UNIT_LENGTH, color, 0x1F);
			}
			break;
		default:
			break;
	}
}

void state_convert(void)
{
    uchar i, j;
	switch(state_now){
		case F0:
			stair_now = 1;	 //direction = STOP;
			state_next = F1;
			break;
		case F1:
			if(K1)	state_next = F2;
			else if(K2)	state_next = F6;
			else state_next = F1;
			break;
		case F2:
			direction = UP;
			change_color(stair_now,DIRECTION,RED);
			state_next = F3;
			break;
		case F3:
			//打开计数器开始计数，运行2s后更新楼层
			if(TR0 == 0)
		 		TR0 = 1;
			break;
		case F4:
			if( K3 || ((!K1)&&(!K3)) )
				state_next = F5;
			else
				state_next = F3;
			break;
		case F5:
			// 清空已到楼层的请求标记
			if(stair_now == 1 || stair_now == 6){
				up_request[stair_now] = 0;
				down_request[stair_now] = 0;
			}
			else{
                // Bug HERE! -- Fixed, needs Check
				if(direction == UP){
                    up_request[stair_now] = 0;

                    direction = DOWN;
                    for(i = stair_now+1; i <= STAIR_SUM; i++){
                        if(up_request[i]){
                            direction = UP;
                            break;
                        }
                    }
				}

				else if(direction == DOWN){
                    down_request[stair_now] = 0;

                    direction = UP;
                    for(i = stair_now-1; i >= 1; i--){
                        if(up_request[i]){
                            direction = DOWN;
                            break;
                        }
                    }
				}

			}
			// 打开计数器开始计数，停留2s
			if(TR0 == 0)
		 		TR0 = 1;
			break;
		case F6:
			direction = DOWN;
			change_color(stair_now,DIRECTION,RED);
			state_next = F7;
			break;
		case F7:
			// 打开计数器开始计数，运行2s后更新楼层
			if(TR0 == 0)
		 		TR0 = 1;
			break;
		case F8:
			if( K4 || ((!K2)&&(!K4)) )
				state_next = F5;
			else
				state_next = F7;
			break;
		default:
			state_next = F0;
			break;
	}
}

void TIMER0_ISR (void) interrupt 1
{
	count++;
	if(count >= 14400){
		if(state_now == F3){
			change_color(stair_now,ELEVATOR,BLACK);
			stair_now++;
			change_color(stair_now,ELEVATOR,RED);
			state_next = F4;
		}
		else if(state_now == F7){
			change_color(stair_now,ELEVATOR,BLACK);
			stair_now--;
			change_color(stair_now,ELEVATOR,RED);
			state_next = F8;
		}
		else if(state_now == F5){
			state_next = F1;    // 处理结束后回到F1状态
			change_color(stair_now,INSIDE,BLACK);
			if((direction == UP && stair_now != 6)||(stair_now == 1))
				change_color(stair_now,OUTSIDE_UP,BLACK);
			else if((direction == DOWN && stair_now != 1)||(stair_now == 6))
				change_color(stair_now,OUTSIDE_DOWN,BLACK);
		}
		count = 0;
		TR0 = 0;
	}
}


void main(void){
	uchar temp;
	uchar ctrl;
	uchar i;

	WDTCN = 0xde;
	WDTCN = 0xad;   // 禁止看门狗
	SYSCLK_Init();
	PORT_Init();

	// 计数器0的设置
	EA = 1;
	TMOD |= 0x02;
	TH0 = 0x00;
	TL0 = 0x00;
	ET0 = 1;
	P7 = 0x80;

	for(i = 0; i <= STAIR_SUM; i++){
		up_request[i] = 0;
		down_request[i] = 0;
	}

    EMIF_Low();
    EMI0TC = 0x41;
    lcd_init9486();
    dis_color(YELLOW);

	// initial the board
	show_char(DIRECTION_SHOW+UNIT_WIDTH, ELEVATOR_HEIGHT, BLACK, 'U');
	show_char(DIRECTION_SHOW+2*UNIT_WIDTH, ELEVATOR_HEIGHT, BLACK, 'P');
	show_char(DIRECTION_SHOW+UNIT_WIDTH, ELEVATOR_HEIGHT+UNIT_LENGTH, BLACK, 'D');
	show_char(DIRECTION_SHOW+2*UNIT_WIDTH, ELEVATOR_HEIGHT+UNIT_LENGTH, BLACK, 'O');
	show_char(DIRECTION_SHOW+3*UNIT_WIDTH, ELEVATOR_HEIGHT+UNIT_LENGTH, BLACK, 'W');
	show_char(DIRECTION_SHOW+4*UNIT_WIDTH, ELEVATOR_HEIGHT+UNIT_LENGTH, BLACK, 'N');

	change_color(i,DIRECTION,RED);
	for(i = 1; i <= 6; i++){
		if(i>1)
			change_color(i,ELEVATOR,BLACK);
		else
			change_color(i,ELEVATOR,RED);
		change_color(i,INSIDE,BLACK);
		if(i < 6)
			change_color(i,OUTSIDE_UP,BLACK);
		if(i > 1)
			change_color(i,OUTSIDE_DOWN,BLACK);
	}

	while(1){
		SHOW_LED(stair_now);	//数码管显示楼层

		//根据按下的按键更新电梯的需求状态和在屏幕上的显示状态
		switch(temp){
			case 0x1:
				change_color(1,OUTSIDE_UP,RED);
				up_request[1] = 1;
				down_request[1] = 1;
				break;
			case 0x2:
				change_color(2,OUTSIDE_UP,RED);
				up_request[2] = 1;
				break;
			case 0x3:
				change_color(3,OUTSIDE_UP,RED);
				up_request[3] = 1;
				break;
			case 0x4:
				change_color(4,OUTSIDE_UP,RED);
				up_request[4] = 1;
				break;
			case 0x5:
				change_color(5,OUTSIDE_UP,RED);
				up_request[5] = 1;
				break;
            case 0x6:
				change_color(6,OUTSIDE_DOWN,RED);
				up_request[6] = 0;
				down_request[6] = 1;
				break;
			case 0x7:
				change_color(2,OUTSIDE_DOWN,RED);
				down_request[2] = 1;
				break;
			case 0x8:
				change_color(3,OUTSIDE_DOWN,RED);
				down_request[3] = 1;
				break;
			case 0x9:
				change_color(4,OUTSIDE_DOWN,RED);
				down_request[4] = 1;
				break;
            case 0x0:
				change_color(5,OUTSIDE_DOWN,RED);
				down_request[5] = 1;
				break;
			case 0xA:
				down_request[1] = 1;
				change_color(1,INSIDE,RED);
				break;
			case 0xB:
				change_color(2,INSIDE,RED);
				if(stair_now < 2)
					up_request[2] = 1;
				else if(stair_now > 2)
					down_request[2] = 1;
				break;
			case 0xC:
				change_color(3,INSIDE,RED);
				if(stair_now < 3)
					up_request[3] = 1;
				else if(stair_now > 3)
					down_request[3] = 1;
				break;
			case 0xD:
				change_color(4,INSIDE,RED);
				if(stair_now < 4)
					up_request[4] = 1;
				else if(stair_now > 4)
					down_request[4] = 1;
				break;
            case 0xE:
				change_color(5,INSIDE,RED);
				if(stair_now < 5)
					up_request[5] = 1;
				else if(stair_now > 5)
					down_request[5] = 1;
				break;
			case 0xF:
				change_color(6,INSIDE,RED);
				up_request[6] = 1;
				break;
			default:
				break;
		}

		// Update K1, K2, K3, K4
		K1 = 0;	//K1=1 表示在当前楼层(stair_now)以上有请求(上/下)，或电梯内部按下的目的地高于当前楼层
		K2 = 0; //K2=1 表示在当前楼层(stair_now)以下有请求(上/下)，或电梯内部按下的目的地低于当前楼层
		K3 = 0;	//K3=1 表示当前楼层为目的地之一，或此层有人要乘电梯上楼，需要停靠此层
		K4 = 0; //K4=1 表示当前楼层为目的地之一，或此层有人要乘电梯下楼，需要停靠此层

		if((up_request[stair_now] == 1) && (direction == UP))
			K3 = 1;
		for(i = stair_now+1; i <= STAIR_SUM; i++){
			if(up_request[i] == 1 || down_request[i] == 1)
				K1 = 1;
		}

		if((down_request[stair_now] == 1) && (direction == DOWN))
			K4 = 1;
		for(i = stair_now-1; i > 0; i--){
			if(down_request[i] == 1 || up_request[i] == 1)
				K2 = 1;
		}

		// Change State
		state_convert();
		state_now = state_next;

		// 采集按键信息
		if(ctrl == temp){
			ctrl = getkey();
			if(ctrl == temp)
				continue;
		}
		temp = ctrl;
	}
}
